### Website
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  name: ai-finto-fi-nginx
---
kind: BuildConfig
apiVersion: build.openshift.io/v1
metadata:
  name: ai-finto-fi-nginx
spec:
  strategy:
    type: Source
    sourceStrategy:
      from:
        kind: ImageStreamTag
        namespace: openshift
        name: 'nginx:1.16-el7'
  source:
    type: Git
    git:
      uri: 'https://github.com/NatLibFi/Annif.git'
      ref: api-instances
    contextDir: /ai.finto.fi
  output:
    to:
      kind: ImageStreamTag
      name: 'ai-finto-fi-nginx:latest'
  # TODO: Currently GitHub webhooks do not work (cluster disallows connections from outside Internet?).
  # For production instance the below triggers should be anyway removed;
  # the builds should be invoked with "oc start-build ai-finto-fi-nginx"
  triggers:
    - type: GitHub
      github:
        secretReference:
          name: ai-finto-fi-github-webhook-secret
    - type: ImageChange
      imageChange:
        lastTriggeredImageID: >-
          image-registry.openshift-image-registry.svc:5000/openshift/nginx@sha256:2878cf2a32e2bd86b8b00c9349e38f652a2952b47a2f891303ea96c7998b7d34
    - type: ConfigChange
---
kind: DeploymentConfig
apiVersion: apps.openshift.io/v1
metadata:
  name: ai-finto-fi-nginx
  labels:
    app: ai-finto-fi-nginx
spec:
  triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
          - ai-finto-fi-nginx
        from:
          kind: ImageStreamTag
          name: 'ai-finto-fi-nginx:latest'
    - type: ConfigChange
  replicas: 1
  test: false
  selector:
    app: ai-finto-fi-nginx
    deploymentconfig: ai-finto-fi-nginx
  template:
    metadata:
      labels:
        app: ai-finto-fi-nginx
        deploymentconfig: ai-finto-fi-nginx
    spec:
      containers:
        - name: ai-finto-fi-nginx
          # Should the image below be specified with a hash, or is "latest" enough?
          image: >-
            image-registry.openshift-image-registry.svc:5000/annif/ai-finto-fi-nginx:latest
          readinessProbe:
            httpGet:
              scheme: HTTP
              path: /index.html
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
          ports:
            - containerPort: 8080
              protocol: TCP
            - containerPort: 8443
              protocol: TCP
          volumeMounts:
            - name: nginx-conf
              mountPath: /opt/app-root/etc/nginx.d/http-context.conf
              subPath: http-context.conf
            - name: nginx-conf
              mountPath: /opt/app-root/etc/nginx.default.d/server-context.conf
              subPath: server-context.conf
      volumes:
        - name: nginx-conf
          configMap:
            name: nginx-conf
---
apiVersion: v1
kind: Service
metadata:
  name: nginx
spec:
  selector:
    app: ai-finto-fi-nginx
  ports:
  - port: 8080
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: annif
  labels:
    type: external
spec:
  host: ai.finto.fi.ext.ocp-kk-test-0.k8s.it.helsinki.fi
  port:
    targetPort: 8080
  to:
    kind: Service
    name: nginx
  wildcardPolicy: None
---
### Annif application
apiVersion: v1
kind: Service
metadata:
  name: annif-app
spec:
  selector:
    app: annif-app
  ports:
  - port: 8000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: annif-app
  name: annif-app
spec:
  selector:
    matchLabels:
      app: annif-app
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: annif-app
    spec:
      containers:
        - image: quay.io/natlibfi/annif:0.52-ocp
          command: ["gunicorn", "annif:create_app()", "--bind", "0.0.0.0:8000", "--timeout", "600"]
          livenessProbe:
            exec:
              command: ["curl", "--fail", "localhost:8000/v1/projects"]
            failureThreshold: 3
            initialDelaySeconds: 600
            periodSeconds: 15
          name: annif-app
          resources:
            limits:
              cpu: 2
              memory: 26Gi
          volumeMounts:
            - mountPath: /annif-projects
              name: model-data
              # TODO: Switch to readOnly, if model syncing method allows.
              #readOnly: true
      volumes:
        - name: model-data
          persistentVolumeClaim:
            claimName: model-data
            readOnly: true
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: model-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 30000Mi
